
* Linker scripts
[[http://fxr.watson.org/fxr/source/conf/Makefile.mips?v%3DFREEBSD11][Linker Script (MIPS)]]
[[http://fxr.watson.org/fxr/source/conf/ldscript.i386?v%3DFREEBSD11][Linker Script (i386)]]

* Important global variables
phys_avail: array of pairs of pm_addr_t
- phys_avail[i] - phys_avail[i + 1] (i even) describes 1 segment of available physical memory.
- physical memory can be stolen from phys_avail, so it doesn't represent all physical memory.

virt_avail
vm_page_array


physmem, realmem: total amount of system physical memory in pages

* Important code paths
** Non-backed page allocation from kernel virtual address space
Kernel virtual address space is managed at the lowest level (individual pages)
by the vmem allocator. Specifically, the kernel_arena arena manages chunks
of kernel virtual address space. Its import function, kva_import, uses the
vm subsystem to allocate a new chunk of address space.

Path:
- [[http://fxr.watson.org/fxr/source/vm/vm_kern.c?v%3DFREEBSD11%3Bim%3D10#L124][kva_alloc]](size)
  - allocates a chunk of kernel virtual address space, but does not back it with physical memory
  - [[http://fxr.watson.org/fxr/source/kern/subr_vmem.c?v%3DFREEBSD11#L1076][vmem_alloc]](kernel_arena, size, M_BESTFIT | M_NOWAIT)
    - first tries to satisfy the request from quantum cache 
      (although kernel_arena has no quantum cache)
    - [[http://fxr.watson.org/fxr/source/kern/subr_vmem.c?v%3DFREEBSD11#L1100][vmem_xalloc]](kernel_arena, size)
      [minaddr = VMEM_ADDR_MIN, maxaddr = VMEM_ADDR_MAX]
      - tries to satisfy the request using what's available
      - when it's not possible, calls vmem_import
      - [[http://fxr.watson.org/fxr/source/kern/subr_vmem.c?v%3DFREEBSD11#L830][vmem_import]](kernel_arena, size)
        - [[http://fxr.watson.org/fxr/source/vm/vm_init.c?v%3DFREEBSD11#L104][kva_import]](size)
          - [[http://fxr.watson.org/fxr/source/vm/vm_map.c?v%3DFREEBSD11#L1494][vm_map_find]](kernel_map, VMFS_SUPER_SPACE (superpage-aligned),
                        MAP_NOFAULT (wired mapping))
            - [[http://fxr.watson.org/fxr/source/vm/vm_map.c?v%3DFREEBSD11%3Bim%3D10#L1181][vm_map_insert]](kernel_map, )
              - expands the kernel pmap if necessary via [[http://fxr.watson.org/fxr/source/mips/mips/pmap.c?v%3DFREEBSD11%3Bim%3D10#L1242][pmap_growkernel]]

** Backed page allocation from kernel virtual address space

* Platform-specific system initialization (MIPS)
** Entry point
[[http://fxr.watson.org/fxr/source/mips/mips/locore.S?v%3DFREEBSD11#L86][_start (mips/mips/locore.S)]]
** Platform-specific startup
[[http://fxr.watson.org/fxr/source/mips/malta/malta_machdep.c?v%3DFREEBSD11#L281][platform_start (mips/malta/malta_machdep.c)]]
- [[http://fxr.watson.org/fxr/source/mips/malta/malta_machdep.c?im%3D7#L176][mips_init (mips/malta/malta_machdep.c)]]
  - initializes phys_avail
  - calls pmap_bootstrap

* Platform-specific system initializaiton (x86)
** Entry point


* Machine-independent startup
[[http://fxr.watson.org/fxr/source/kern/init_main.c?v%3DFREEBSD11#L204][mi_startup (kern/init_main.c)]]
- calls initialization routines registered using the SYSINIT macro
- subsystems of note: SI_SUB_VM, SI_SUB_KMEM

* Platform-specific virtual memory initialization (MIPS)
[[http://fxr.watson.org/fxr/source/mips/mips/pmap.c?im%3D7#L490][pmap_bootstrap (mips/mips/pmap.c)]]
- sorts phys_avail segments by start address
- insert wired mappings for pcpu (only if SMP) (mips_pcpu_tlb_init)
- [[http://fxr.watson.org/fxr/source/mips/mips/pmap.c?im%3D10#L431][pmap_create_kernel_pagetable (mips/mips/pmap.c)]]
  - steals physical memory for segment table and all kernel page tables
  - initializes segment table entries and sets all PTEs to global and invalid

* S

* Platform-independent virtual memory initialization (SI_SUB_VM)
[[http://fxr.watson.org/fxr/source/vm/vm_init.c#L132][vm_mem_init (vm/vm_init.c)]]
- sets page size
- [[http://fxr.watson.org/fxr/source/vm/vm_page.c#L417][vm_page_startup (vm/vm_page.c)]]
  - bootstraps kernel memory allocator ([[http://fxr.watson.org/fxr/source/vm/uma_core.c?im%3D3#L1758][uma_startup]])
  - allocates and initializes vm_page_array describing physical pages ([[http://fxr.watson.org/fxr/source/vm/vm_page.c#L570][here]])
  - adds segments describing contiguous segments of available (not reserved/stolen)
    physical memory ([[http://fxr.watson.org/fxr/source/vm/vm_page.c#L596][here]])
  - initializes the physical memory allocator ([[http://fxr.watson.org/fxr/source/vm/vm_phys.c?im%3D3#L598][vm_phys_init]])
- [[http://fxr.watson.org/fxr/source/kern/subr_vmem.c#L653][vmem_startup (kern/subr_vmem.c)]]
- [[http://fxr.watson.org/fxr/source/vm/vm_object.c#L276][vm_object_init (vm/vm_object.c)]]
- [[http://fxr.watson.org/fxr/source/vm/vm_map.c#L192][vm_map_startup (vm/vm_map.c)]]
- [[http://fxr.watson.org/fxr/source/vm/vm_kern.c#L517][kmem_init (vm/vm_kern.c)]]
  - creates the kernel map
  - inserts a mapping covering kernel text, data, bss and bootstrap data
    (the vm_map_entry for this mapping has the MAP_NOFAULT flag set)
- [[http://fxr.watson.org/fxr/source/mips/mips/pmap.c#L616][pmap_init (mips/mips/pmap.c)]]
- [[http://fxr.watson.org/fxr/source/vm/vm_pager.c#L182][vm_pager_init (vm/vm_pager.c)]]

* Page Table structure (on MIPS)
- 2-level hierarchical page table
- at the top level there's the segment table, whose entries are
  pointers to page tables
- page tables contain PTEs mapping virtual pages

* Keeping track of mappings for managed pages
- struct pv_entry
