Ideas for additional chapters:
- Different types of page table structures

* Introduction
** What is virtual memory?
It's a means of providing processes with a uniform, abstract (virtual) version
of memory: a contiguous large chunk of addresses, much larger than the amount of
physical memory in the system.
*** Basic definitions: MMU, Virtual Address Space, Pages, Frames.
** FreeBSD source tree overview
* Data structures for representing a virtual address space
** The user's perspective
- Flat address space, much larger than the amount of physical memory
- Some regions are accessible, some are not
  - Can use this to represent the address space in a compressed way
- Regions can allow different types of accesses
- The user can map the contents of a file, get additional anonymous memory,
  change the protection of regions, wire pages down
- Processes can share memory
** The system's perspecive
- Multiple processes are competing for physical memory
  - Impossible to keep every process' mapped pages resident
  - Most heavily used pages resident, the rest in backing store
  - Need to do the bookkeeping
  - Now a process may try to access a page that's not resident, what should happen?
    - PAGE FAULT!
    - Happen frequently, need to service them as fast as possible
** Requirements
- Support for different types of objects: files, anonymous memory, devices...
- Fast handling of page faults
- Support for shared memory
- Bookkeeping associated with holding parts of the AS in backing store
- Portable
** FreeBSD: struct vmspace
*** Machine-independent parts
**** vm_map
- Represent the abstract layout of a process' address space
  - Ordered list of memory segments represented by vm_map_entry
    - Segments share protection and 'type' (anonymous/file/device)
    - Also organized into a binary tree for fast lookup
**** vm_map_entry
- Represent contiguous ranges of pages with the same protection and 'type'
  (anonymous/file/device)
- They are not concerned with the contents of the memory
- Point at a vm_object that holds the contents
**** vm_object
- Acts as a cache for a memory object (file/anonymous memory)
- Keeps track of resident pages belonging e.g. a file
- Multiple vm_map_entry from different address spaces can reference
  the same vm_object, enabling inter-process sharing
- Is not concerned with how pages are brought into memory -- that's the pager's job
**** vm_page
- Describes a single page of physical memory
- Holds a list of all mappings to this page
*** Machine-dependent parts
**** pmap
- Stores the mapping of virtual -> physical addresses in a way that's
**** pv_entry
* Hardware support for virtual memory
** AMD64
** MIPS32
* Pitfalls
** TLB
** Cache
** SMP systems
* Initialization of kernel virtual address space
- Highly machine-dependent, but some parts are portable
** Step-by-step overview of the process on x86 with code snippets
* Managing multiple virtual address spaces in FreeBSD
** Creation
** Switching
** Destruction
** Support for different types of backing store
** Allocation/deallocation of space
** Mapping files
** Shared memory
** Allocation, replacement & fetching policy
** Cleaning dirty pages and swapping
* Mimiker
** What it looks like
** My contributions
